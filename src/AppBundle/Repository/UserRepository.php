<?php

namespace AppBundle\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    // Autocomplete pour la recherche d'un user
    public function findLikeUsername($queryString)
    {
        if(!empty($queryString)) {
            $result = $this->getEntityManager()
                ->createQuery('
                    SELECT u.id, u.username
                    FROM AppBundle:User u
                    WHERE u.username like :string'
                    )
                ->setParameter('string', '%'.$queryString.'%')
                ->getResult();
        } else {
            $result = "";
        }

        // On retourne le(s) résultat()
        return $result;
    }

    public function getByExperienceDESC()
    {
        $result = $this->getEntityManager()
            ->createQuery('
                SELECT u.id, u.username, u.experience value
                FROM AppBundle:User u
                ORDER BY value DESC
            ')
            ->setMaxResults(15)
            ->getResult();

        // On retourne le résultat contenu dans 2 arrays sous forme de int
        return $result;
    }

    // Affichage des 15 players ayant le plus de Victory
    public function findPodiumMostVictoryDESC()
    {
        $results = $this->getEntityManager()
            ->createQuery('
            SELECT u.id, u.username, count(fg.id) value
            FROM AppBundle:FinishedGame fg
            JOIN fg.players p
            JOIN p.user u
            WHERE p.faction = fg.faction
            AND p.user = u.id
            GROUP BY p.user
            ORDER BY value DESC'
                )
            ->setMaxResults(15)
            ->getResult();

        // On retourne les résultats
        // Chaque ligne représente le total de victoire pour un player
        return $results;
    }

    // Affichage des 15 players ayant le plus de Killed
    public function findPodiumKilledEnnemiesDESC()
    {
        $results = $this->getEntityManager()
            ->createQuery('
                SELECT u.id, u.username, sum(p.killed) value
                FROM AppBundle:Players p
                JOIN p.user u
                WHERE p.user = u.id
                GROUP BY p.user
                ORDER BY value DESC'
                )
            ->setMaxResults(15)
            ->getResult();

        // On retourne les résultats
        // Chaque ligne représente le total de Killed pour un player
        return $results;
    }

    // Nombre de killed pour un player
    public function findTotalKilledEnnemies($idPlayer)
    {
        $result = $this->getEntityManager()
            ->createQuery('
                SELECT sum(p.killed)
                FROM AppBundle:Players p
                WHERE p.user = :idPlayer'
                )
            ->setParameter('idPlayer', $idPlayer)
            ->getResult();

        // On retourne le résultat
        return $result;
    }

    // Nombre de death pour un player
    public function findTotalDeaths($idPlayer)
    {
        $result = $this->getEntityManager()
            ->createQuery('
                SELECT sum(p.death)
                FROM AppBundle:Players p
                WHERE p.user = :idPlayer'
                )
            ->setParameter('idPlayer', $idPlayer)
            ->getResult();

        // On retourne le résultat
        return $result;
    }

    // Affichage des 15 players ayant le plus de Revive
    public function findPodiumReviveAlliesDESC()
    {
        $results = $this->getEntityManager()
            ->createQuery('
                SELECT u.id, u.username, sum(p.revive) value
                FROM AppBundle:Players p
                JOIN p.user u
                WHERE p.user = u.id
                GROUP BY p.user
                ORDER BY value DESC'
                )
            ->setMaxResults(15)
            ->getResult();

        // On retourne les résultats
        // Chaque ligne représente le total de Killed pour un player
        return $results;
    }

    // Nombre de revive pour un player
    public function findTotalReviveAllies($idPlayer)
    {
        $result = $this->getEntityManager()
            ->createQuery('
                SELECT p.revive
                FROM AppBundle:Players p
                WHERE p.user_id = :idPlayer'
                )
            ->setParameter('idPlayer', $idPlayer)
            ->getResult();

        // On retourne le(s) résultat(s)
        // Chaque ligne représente le total de Revive pour une partie
        return $result;
    }

    // Nombre de partie jouée pour un player
    public function findTotalGamePlayed($idPlayer)
    {
        $result = $this->getEntityManager()
            ->createQuery('
                SELECT count(p.id)
                FROM AppBundle:Players p
                WHERE p.user_id = :idPlayer'
                )
            ->setParameter('idPlayer', $idPlayer)
            ->getResult();

        // On retourne un seul résultat => nombre de partie jouée
        return $result;
    }

    // Affichage des 15 players ayant le plus de parties jouées
    public function findPodiumPlayedGameDESC()
    {
        $results = $this->getEntityManager()
            ->createQuery('
                SELECT u.id, u.username, count(p.id) value
                FROM AppBundle:Players p
                JOIN p.user u
                WHERE p.user = u.id
                GROUP BY p.user
                ORDER BY value DESC'
                )
            ->setMaxResults(15)
            ->getResult();

        // On retourne les résultats
        // Chaque ligne représente le total de Partie pour un player
        return $results;
    }

    // Nombre de victoires d'un user
    public function findVictories($idUser)
    {
        $result = $this->getEntityManager()
            ->createQuery('
                SELECT count(fg.id) value
                FROM AppBundle:FinishedGame fg
                JOIN fg.players p
                JOIN p.user u
                WHERE p.faction = fg.faction
                AND p.user = :idUser')
                ->setParameter('idUser', $idUser)
                ->getResult();
        return $result;
    }
}
